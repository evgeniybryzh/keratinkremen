var whatInput=function(){"use strict";"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self&&self;return function(e,t){return e(t={exports:{}},t.exports),t.exports}((function(e,t){
/**
	 * what-input - A global utility for tracking the current input method (mouse, keyboard or touch).
	 * @version v5.2.3
	 * @link https://github.com/ten1seven/what-input
	 * @license MIT
	 */
var n;n=function(){return function(e){var t={};function n(o){if(t[o])return t[o].exports;var i=t[o]={exports:{},id:o,loaded:!1};return e[o].call(i.exports,i,i.exports,n),i.loaded=!0,i.exports}return n.m=e,n.c=t,n.p="",n(0)}([function(e,t){e.exports=function(){if("undefined"==typeof document||"undefined"==typeof window)return{ask:function(){return"initial"},element:function(){return null},ignoreKeys:function(){},specificKeys:function(){},registerOnChange:function(){},unRegisterOnChange:function(){}};var e=document.documentElement,t=null,n="initial",o=n,i=Date.now();try{window.sessionStorage.getItem("what-input")&&(n=window.sessionStorage.getItem("what-input")),window.sessionStorage.getItem("what-intent")&&(o=window.sessionStorage.getItem("what-intent"))}catch(e){}var r=["button","input","select","textarea"],s=[],u=[16,17,18,91,93],a=[],d={keydown:"keyboard",keyup:"keyboard",mousedown:"mouse",mousemove:"mouse",MSPointerDown:"pointer",MSPointerMove:"pointer",pointerdown:"pointer",pointermove:"pointer",touchstart:"touch",touchend:"touch"},c=!1,w={x:null,y:null},f={2:"touch",3:"touch",4:"mouse"},l=!1;try{var p=Object.defineProperty({},"passive",{get:function(){l=!0}});window.addEventListener("test",null,p)}catch(e){}var h=function(){var e=!!l&&{passive:!0};window.PointerEvent?(window.addEventListener("pointerdown",m),window.addEventListener("pointermove",y)):window.MSPointerEvent?(window.addEventListener("MSPointerDown",m),window.addEventListener("MSPointerMove",y)):(window.addEventListener("mousedown",m),window.addEventListener("mousemove",y),"ontouchstart"in window&&(window.addEventListener("touchstart",m,e),window.addEventListener("touchend",m))),window.addEventListener(b(),y,e),window.addEventListener("keydown",m),window.addEventListener("keyup",m),window.addEventListener("focusin",g),window.addEventListener("focusout",E)},m=function(e){var t=e.which,i=d[e.type];"pointer"===i&&(i=L(e));var s=!a.length&&-1===u.indexOf(t),c=a.length&&-1!==a.indexOf(t),w="keyboard"===i&&t&&(s||c)||"mouse"===i||"touch"===i;if(x(i)&&(w=!1),w&&n!==i){n=i;try{window.sessionStorage.setItem("what-input",n)}catch(e){}v("input")}if(w&&o!==i){var f=document.activeElement;if(f&&f.nodeName&&(-1===r.indexOf(f.nodeName.toLowerCase())||"button"===f.nodeName.toLowerCase()&&!O(f,"form"))){o=i;try{window.sessionStorage.setItem("what-intent",o)}catch(e){}v("intent")}}},v=function(t){e.setAttribute("data-what"+t,"input"===t?n:o),S(t)},y=function(e){var t=d[e.type];if("pointer"===t&&(t=L(e)),M(e),(!c&&!x(t)||c&&"wheel"===e.type||"mousewheel"===e.type||"DOMMouseScroll"===e.type)&&o!==t){o=t;try{window.sessionStorage.setItem("what-intent",o)}catch(e){}v("intent")}},g=function(n){n.target.nodeName?(t=n.target.nodeName.toLowerCase(),e.setAttribute("data-whatelement",t),n.target.classList&&n.target.classList.length&&e.setAttribute("data-whatclasses",n.target.classList.toString().replace(" ",","))):E()},E=function(){t=null,e.removeAttribute("data-whatelement"),e.removeAttribute("data-whatclasses")},L=function(e){return"number"==typeof e.pointerType?f[e.pointerType]:"pen"===e.pointerType?"touch":e.pointerType},x=function(e){var t=Date.now(),o="mouse"===e&&"touch"===n&&t-i<200;return i=t,o},b=function(){return"onwheel"in document.createElement("div")?"wheel":void 0!==document.onmousewheel?"mousewheel":"DOMMouseScroll"},S=function(e){for(var t=0,i=s.length;t<i;t++)s[t].type===e&&s[t].fn.call(void 0,"input"===e?n:o)},M=function(e){w.x!==e.screenX||w.y!==e.screenY?(c=!1,w.x=e.screenX,w.y=e.screenY):c=!0},O=function(e,t){var n=window.Element.prototype;if(n.matches||(n.matches=n.msMatchesSelector||n.webkitMatchesSelector),n.closest)return e.closest(t);do{if(e.matches(t))return e;e=e.parentElement||e.parentNode}while(null!==e&&1===e.nodeType);return null};return"addEventListener"in window&&Array.prototype.indexOf&&(d[b()]="mouse",h(),v("input"),v("intent")),{ask:function(e){return"intent"===e?o:n},element:function(){return t},ignoreKeys:function(e){u=e},specificKeys:function(e){a=e},registerOnChange:function(e,t){s.push({fn:e,type:t||"input"})},unRegisterOnChange:function(e){var t=function(e){for(var t=0,n=s.length;t<n;t++)if(s[t].fn===e)return t}(e);(t||0===t)&&s.splice(t,1)}}}()}])},e.exports=n()}))}();

//# sourceMappingURL=data:application/json;charset=utf8;base64,

var generator = (function (exports) {
  'use strict';

  const useGenerator = () => {
    const $mainButton = document.getElementById("generator-button");
    const $secButton = document.getElementById("generator-btn");
    const $finButton = document.getElementById("gen-form-button");
    const $genBody = document.getElementById("gen-body");
    const $genSecBody = document.getElementById("gen-second-body");
    const labels = document.getElementsByClassName("generator__label");
    const qBoxes = document.getElementsByClassName("generator__question-box");
    const $mTitle = document.getElementById("mtitle");
    const inputs = document.getElementsByClassName("generator__input");
    document.addEventListener("click", event => {
      if (event.target === $mainButton) {
        $mainButton.style.display = "none";
        $genBody.style.display = "block";
        $mTitle.style.display = "none";
      }

      if (event.target === $secButton) {
        $genBody.style.display = "none";
        $genSecBody.style.display = "flex";
        $genSecBody.style.justifyContent = "flex-start";
        $genSecBody.style.alignItems = "center";
        $genSecBody.style.flexDirection = "column";
      }

      if (event.target === $finButton) {
        $mainButton.style.display = "inline-block";
        $genSecBody.style.display = "none";
        qBoxes[1].style.display = "none";
        qBoxes[2].style.display = "none";
        qBoxes[3].style.display = "none";
        $mTitle.style.display = "block";

        for (let i = 0; i < inputs.length; i++) {
          inputs[i].checked = false;
        }
      }

      if (event.target === labels[1]) {
        qBoxes[1].style.display = "flex";
      }

      if (event.target === labels[2]) {
        qBoxes[2].style.display = "flex";
      }

      if (event.target === labels[4]) {
        qBoxes[3].style.display = "flex";
      }
    });
  };

  exports.useGenerator = useGenerator;

  return exports;

}({}));

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdG9yLmpzIiwic291cmNlcyI6WyJzcmMvanMvZ2VuZXJhdG9yLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnQgY29uc3QgdXNlR2VuZXJhdG9yID0gKCkgPT4ge1xuICBjb25zdCAkbWFpbkJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZ2VuZXJhdG9yLWJ1dHRvblwiKTtcbiAgY29uc3QgJHNlY0J1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZ2VuZXJhdG9yLWJ0blwiKTtcbiAgY29uc3QgJGZpbkJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZ2VuLWZvcm0tYnV0dG9uXCIpO1xuICBjb25zdCAkZ2VuQm9keSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZ2VuLWJvZHlcIik7XG4gIGNvbnN0ICRnZW5TZWNCb2R5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJnZW4tc2Vjb25kLWJvZHlcIik7XG4gIGNvbnN0IGxhYmVscyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJnZW5lcmF0b3JfX2xhYmVsXCIpO1xuICBjb25zdCBxQm94ZXMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwiZ2VuZXJhdG9yX19xdWVzdGlvbi1ib3hcIik7XG4gIGNvbnN0ICRtVGl0bGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm10aXRsZVwiKTtcbiAgY29uc3QgaW5wdXRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcImdlbmVyYXRvcl9faW5wdXRcIik7XG5cbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChldmVudCkgPT4ge1xuICAgIGlmIChldmVudC50YXJnZXQgPT09ICRtYWluQnV0dG9uKSB7XG4gICAgICAkbWFpbkJ1dHRvbi5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICAkZ2VuQm9keS5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuICAgICAgJG1UaXRsZS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgfVxuICAgIGlmIChldmVudC50YXJnZXQgPT09ICRzZWNCdXR0b24pIHtcbiAgICAgICRnZW5Cb2R5LnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICRnZW5TZWNCb2R5LnN0eWxlLmRpc3BsYXkgPSBcImZsZXhcIjtcbiAgICAgICRnZW5TZWNCb2R5LnN0eWxlLmp1c3RpZnlDb250ZW50ID0gXCJmbGV4LXN0YXJ0XCI7XG4gICAgICAkZ2VuU2VjQm9keS5zdHlsZS5hbGlnbkl0ZW1zID0gXCJjZW50ZXJcIjtcbiAgICAgICRnZW5TZWNCb2R5LnN0eWxlLmZsZXhEaXJlY3Rpb24gPSBcImNvbHVtblwiO1xuICAgIH1cbiAgICBpZiAoZXZlbnQudGFyZ2V0ID09PSAkZmluQnV0dG9uKSB7XG4gICAgICAkbWFpbkJ1dHRvbi5zdHlsZS5kaXNwbGF5ID0gXCJpbmxpbmUtYmxvY2tcIjtcbiAgICAgICRnZW5TZWNCb2R5LnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgIHFCb3hlc1sxXS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICBxQm94ZXNbMl0uc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgICAgcUJveGVzWzNdLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICRtVGl0bGUuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW5wdXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlucHV0c1tpXS5jaGVja2VkID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChldmVudC50YXJnZXQgPT09IGxhYmVsc1sxXSkge1xuICAgICAgcUJveGVzWzFdLnN0eWxlLmRpc3BsYXkgPSBcImZsZXhcIjtcbiAgICB9XG4gICAgaWYgKGV2ZW50LnRhcmdldCA9PT0gbGFiZWxzWzJdKSB7XG4gICAgICBxQm94ZXNbMl0uc3R5bGUuZGlzcGxheSA9IFwiZmxleFwiO1xuICAgIH1cbiAgICBpZiAoZXZlbnQudGFyZ2V0ID09PSBsYWJlbHNbNF0pIHtcbiAgICAgIHFCb3hlc1szXS5zdHlsZS5kaXNwbGF5ID0gXCJmbGV4XCI7XG4gICAgfVxuICB9KTtcbn07XG4iXSwibmFtZXMiOlsidXNlR2VuZXJhdG9yIiwiJG1haW5CdXR0b24iLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiJHNlY0J1dHRvbiIsIiRmaW5CdXR0b24iLCIkZ2VuQm9keSIsIiRnZW5TZWNCb2R5IiwibGFiZWxzIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsInFCb3hlcyIsIiRtVGl0bGUiLCJpbnB1dHMiLCJhZGRFdmVudExpc3RlbmVyIiwiZXZlbnQiLCJ0YXJnZXQiLCJzdHlsZSIsImRpc3BsYXkiLCJqdXN0aWZ5Q29udGVudCIsImFsaWduSXRlbXMiLCJmbGV4RGlyZWN0aW9uIiwiaSIsImxlbmd0aCIsImNoZWNrZWQiXSwibWFwcGluZ3MiOiI7OztRQUVhQSxZQUFZLEdBQUcsTUFBTTtFQUNoQyxRQUFNQyxXQUFXLEdBQUdDLFFBQVEsQ0FBQ0MsY0FBVCxDQUF3QixrQkFBeEIsQ0FBcEI7RUFDQSxRQUFNQyxVQUFVLEdBQUdGLFFBQVEsQ0FBQ0MsY0FBVCxDQUF3QixlQUF4QixDQUFuQjtFQUNBLFFBQU1FLFVBQVUsR0FBR0gsUUFBUSxDQUFDQyxjQUFULENBQXdCLGlCQUF4QixDQUFuQjtFQUNBLFFBQU1HLFFBQVEsR0FBR0osUUFBUSxDQUFDQyxjQUFULENBQXdCLFVBQXhCLENBQWpCO0VBQ0EsUUFBTUksV0FBVyxHQUFHTCxRQUFRLENBQUNDLGNBQVQsQ0FBd0IsaUJBQXhCLENBQXBCO0VBQ0EsUUFBTUssTUFBTSxHQUFHTixRQUFRLENBQUNPLHNCQUFULENBQWdDLGtCQUFoQyxDQUFmO0VBQ0EsUUFBTUMsTUFBTSxHQUFHUixRQUFRLENBQUNPLHNCQUFULENBQWdD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
